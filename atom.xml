<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Harvey`s note</title>
  
  <subtitle>专注当前的任务，控制支出</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://harveyyeung.github.io/"/>
  <updated>2018-01-05T08:19:48.294Z</updated>
  <id>https://harveyyeung.github.io/</id>
  
  <author>
    <name>Harvey</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用opencv简单画图</title>
    <link href="https://harveyyeung.github.io/2018/01/05/PracPythonOpenCV2/"/>
    <id>https://harveyyeung.github.io/2018/01/05/PracPythonOpenCV2/</id>
    <published>2018-01-05T07:23:38.000Z</published>
    <updated>2018-01-05T08:19:48.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote>如opencv开发前的准备工作中所说,此系列文章是在学习<a href="https://jackmk.ctfile.com/fs/14155983-233384097" target="_blank" rel="noopener">Practical Python and OpenCV</a>(<a href="https://jackmk.ctfile.com/fs/14155983-233384097" target="_blank" rel="noopener">点击下载</a>)这本书的一些记录,发出来的文章跳过了第三章对RGB,以及numpy简单操作等介绍，请大家下载原书查看，在原书中对一下段落已进行翻译注释。文章系列完整展示代码<a href="https://jackmk.ctfile.com/fs/14155983-233412040" target="_blank" rel="noopener">点击下载</a></blockquote><h3 id="线和矩形"><a href="#线和矩形" class="headerlink" title="线和矩形"></a>线和矩形</h3><figure class="highlight python"><figcaption><span>画线</span><a href="https://jackmk.ctfile.com/fs/14155983-233412040" target="_blank" rel="noopener">drawing.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">canvas = np.zeros((<span class="number">300</span>, <span class="number">300</span>, <span class="number">3</span>), dtype = <span class="string">"uint8"</span>)</span><br><span class="line"><span class="comment">#使用np.zeros方法构造一个300，300，3通道的RGB的numpy array</span></span><br><span class="line"><span class="comment">#zeros方法用初始值为零填充数组中的每个元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#dtype 数据类型  8进制（</span></span><br><span class="line"><span class="comment">#Since we are representing our image as an RGB image with pixels in the range [0, 255], </span></span><br><span class="line"><span class="comment">#it’s important that we use an 8-bit unsigned integer, or uint8. There #are many </span></span><br><span class="line"><span class="comment">#other data types that we can use (common ones include 32-bit integers, and 32-bit </span></span><br><span class="line"><span class="comment">#or 64-bit floats), but we’ll mainly be using uint8 for the majority of the examples in this book）</span></span><br><span class="line"></span><br><span class="line">green = (<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)   <span class="comment">#定义一个表示绿色的BGR元组</span></span><br><span class="line">cv2.line(canvas,(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">300</span>,<span class="number">300</span>),green) </span><br><span class="line"><span class="comment">#line(canvas.point1,point2,color) 画布，起点，终点，颜色</span></span><br><span class="line"> </span><br><span class="line">cv2.imshow(<span class="string">"Canvas"</span>, canvas)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">red = (<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)</span><br><span class="line">cv2.line(canvas,(<span class="number">300</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">300</span>),red,<span class="number">3</span>)</span><br><span class="line"><span class="comment">#line(canvas.point1,point2,color，thickness) 画布，起点，终点，颜色，线条宽度pixels</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">"Canvas"</span>,canvas)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>  <p>运行结果如下:<br><img src="/images/PracPythonOpenCV2-1.png" width="200" height="300" title="图·1"></p><figure class="highlight python"><figcaption><span>画矩形</span><a href="https://jackmk.ctfile.com/fs/14155983-233412040" target="_blank" rel="noopener">drawing.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cv2.rectangle(canvas,(<span class="number">10</span>,<span class="number">10</span>),(<span class="number">60</span>,<span class="number">60</span>),green)</span><br><span class="line"><span class="comment">#rectangle(canvas,point1,point2,color)画布，起点，终点，颜色</span></span><br><span class="line">we are starting our rectangle at point (<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">We decide to end our rectangle at(<span class="number">60</span>, <span class="number">60</span>), </span><br><span class="line">defining a region of <span class="number">50</span> x <span class="number">50</span> pixels</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">"Canvas"</span>,canvas)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv2.rectangle(canvas,(<span class="number">50</span>,<span class="number">200</span>),(<span class="number">200</span>,<span class="number">225</span>),red,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#rectangle(canvas,point1,point2,color,thickness) 画布，起点，终点，颜色，线条宽度pixels</span></span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">"Canvas"</span>,canvas)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>  <p>以上我们只绘制了一个矩形的轮廓，如何绘制一个填充满的矩形？<br>&emsp;&emsp;我们只需要通过设置厚度参数为：-1，如下<br><figure class="highlight python"><figcaption><span>填充矩形</span><a href="https://jackmk.ctfile.com/fs/14155983-233412040" target="_blank" rel="noopener">drawing.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blue = (<span class="number">255</span>, <span class="number">0</span> , <span class="number">0</span>)</span><br><span class="line">cv2.rectangle(canvas,(<span class="number">200</span>,<span class="number">50</span>),(<span class="number">255</span>,<span class="number">125</span>),blue,<span class="number">-1</span>)</span><br><span class="line">cv2.imshow(<span class="string">"Canvas"</span>,canvas)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br>运行结果如下:<br><img src="/images/PracPythonOpenCV2-2.png" width="200" height="300" title="图·2"></p><h3 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h3><figure class="highlight python"><figcaption><span>画圆</span><a href="https://jackmk.ctfile.com/fs/14155983-233412040" target="_blank" rel="noopener">drawing.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">canvas = np.zeros((<span class="number">300</span>,<span class="number">300</span>,<span class="number">3</span>),dtype = <span class="string">"uint8"</span>)</span><br><span class="line">(centerX,centerY) = (canvas.shape[<span class="number">1</span>] // <span class="number">2</span> ,canvas.shape[<span class="number">0</span>] //<span class="number">2</span>)</span><br><span class="line"><span class="comment">#图像canvas的高度可以在canvas.shape [0]和canvas.shape [1]的宽度中找到。shape [2]为图像channels</span></span><br><span class="line">white = (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">175</span>,<span class="number">25</span>):</span><br><span class="line"><span class="comment"># range(start, stop[, step])</span></span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</span></span><br><span class="line"><span class="comment"># end: 计数到 end 结束，但不包括 end。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</span></span><br><span class="line"><span class="comment"># step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</span></span><br><span class="line">     cv2.circle(canvas,(centerX,centerY),r,white)</span><br><span class="line"><span class="comment"># cv2.circle(canvas,(centerX,centerY),radius,color,thickness) 画布，起点，终点，颜色，线条宽度(为-1时填充整个图像)</span></span><br></pre></td></tr></table></figure> <p>运行结果如下:<br><img src="/images/PracPythonOpenCV2-3.png" width="200" height="300" title="图·3"></p><p>画一个半径，中心点随机的填充多圆图<br><figure class="highlight python"><figcaption><span>画圆</span><a href="https://jackmk.ctfile.com/fs/14155983-233412040" target="_blank" rel="noopener">drawing.py</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">25</span>):</span><br><span class="line">    radius = np.random.randint(<span class="number">5</span>, high =<span class="number">200</span>)</span><br><span class="line"> 使用np.random.randint 生成一个<span class="number">5</span>到<span class="number">200</span>之间的随机数</span><br><span class="line">    color = np.random.randint(<span class="number">0</span>, high =<span class="number">256</span>,size=(<span class="number">3</span>,)).tolist()</span><br><span class="line">    pt = np.random.randint(<span class="number">0</span>, high=<span class="number">300</span>, size = (<span class="number">2</span>,))</span><br><span class="line">    cv2.circle(canvas,tuple(pt),radius,color,<span class="number">-1</span>)</span><br><span class="line">cv2.imshow(<span class="string">"Canvas"</span>,canvas)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br>运行结果如下:<br><img src="/images/PracPythonOpenCV2-4.png" width="200" height="300" title="图·4"></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.random.randint(low, high=None, size=None, dtype=<span class="string">'l'</span>)</span><br></pre></td></tr></table></figure><div class="note "><p>Return random integers from low (inclusive) to high (exclusive).<br>Return random integers from the “discrete uniform” distribution of the specified dtype in the “half-open” interval [low, high). If high is None (the default), then results are from [0, low).</p></div><p>Parameters:</p><ul><li>low : intLowest (signed) integer to be drawn from the distribution (unless high=None, in which case this parameter is one above the highest such integer).</li><li>high : int, optionalIf provided, one above the largest (signed) integer to be drawn from the distribution (see above for behavior if high=None).</li><li>size : int or tuple of ints, optionalOutput shape. If the given shape is, e.g., (m, n, k), then m <em> n </em> k samples are drawn. Default is None, in which case a single value is returned.</li><li>dtype : dtype, optionalDesired dtype of the result. All dtypes are determined by their name, i.e., ‘int64’, ‘int’, etc, so byteorder is not available and a specific precision may have different C types depending on the platform. The default value is ‘np.int’.New in version 1.11.0.</li></ul><p>Returns: </p><ul><li>out : int or ndarray of intssize-shaped array of random integers from the appropriate distribution, or a single such random int if size not provided.</li></ul><blockquote class="blockquote-center" "荀子·修身"="">道虽迩，不行不至；事虽小，不为不成</blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;如opencv开发前的准备工作中所说,此系列文章是在学习&lt;a href=&quot;https://jackmk.ctfile.com/fs/14155983-233384097&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Practical P
      
    
    </summary>
    
      <category term="opencv" scheme="https://harveyyeung.github.io/categories/opencv/"/>
    
    
      <category term="opencv" scheme="https://harveyyeung.github.io/tags/opencv/"/>
    
      <category term="python" scheme="https://harveyyeung.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>opencv开发前的准备工作</title>
    <link href="https://harveyyeung.github.io/2018/01/05/PracPythonOpenCV1/"/>
    <id>https://harveyyeung.github.io/2018/01/05/PracPythonOpenCV1/</id>
    <published>2018-01-05T05:36:34.000Z</published>
    <updated>2018-01-05T06:49:45.138Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/practicalpythonopencv.png" width="200" height="300"><p>这是我在学习<a href="https://jackmk.ctfile.com/fs/14155983-233384097" target="_blank" rel="noopener">Practical Python and OpenCV</a>(<a href="https://jackmk.ctfile.com/fs/14155983-233384097" target="_blank" rel="noopener">点击下载</a>)这本书的一些记录。计算机视觉的目标是理解图片中展示的内容。为了探索计算机视觉的世界，我们首先需要安装一些软件包和库。作为计算机视觉的初学者，安装其中一些软件包（特别是OpenCV）可能非常繁琐，具体取决于您使用的操作系统。如果遇到问题，请务必查阅软件包的网站以获取最新的安装说明。强烈建议您使用pip来管理软件包的安装。</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>&emsp;&emsp;在搭建环境的开始，首先确保你已经安装了python.如何安装请看： <a href="http://www.runoob.com/python/python-install.html" target="_blank" rel="noopener">http://www.runoob.com/python/python-install.html</a></p><h3 id="opencv"><a href="#opencv" class="headerlink" title="opencv"></a><a href="http://opencv.org/" target="_blank" rel="noopener">opencv</a></h3><p>&emsp;&emsp;如果NumPy的主要目标是大型高效的多维数组表示，那么OpenCV的主要目标就是实时图像处理,书中作者收集了PyImageSearch上各种Python版本和操作系统的OpenCV安装教程,<a href="https://www.pyimagesearch.com/opencv-tutorials-resources-guides/" target="_blank" rel="noopener">教程地址</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install opencv-python <span class="comment">#安装Opencv-python 的命令</span></span><br></pre></td></tr></table></figure><h3 id="numpy-和-scipy"><a href="#numpy-和-scipy" class="headerlink" title="numpy 和 scipy"></a><a href="http://www.numpy.org/" target="_blank" rel="noopener">numpy</a> 和 <a href="https://www.scipy.org/" target="_blank" rel="noopener">scipy</a></h3><p>&emsp;&emsp;<a href="http://www.numpy.org/" target="_blank" rel="noopener">numpy</a>是Python编程语言的一个库，为大型多维数组提供支持。使用numpy可以将图片转换为多维数组。将图像表示为NumPy数组在计算上和资源效率上表现优异，许多其他图像处理和机器学习库也使用NumPy数组表示。通过使用NumPy内置的高级数学函数，我们可以快速，方便地对图像进行数值分析。</p><p>&emsp;&emsp;<a href="https://www.scipy.org/" target="_blank" rel="noopener">scipy</a>是一个高级的科学计算库，它和Numpy联系很密切，Scipy一般都是操控Numpy数组来进行科学计算，所以可以说是基于Numpy之上了。Scipy有很多子模块可以应对不同的应用，例如插值运算，优化算法、图像处理、数学统计等。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pip install numpy <span class="comment">#安装numpy</span></span><br><span class="line">$ pip install scipy <span class="comment">#安装scipy</span></span><br></pre></td></tr></table></figure></p><h3 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a><a href="http://matplotlib.org/" target="_blank" rel="noopener">matplotlib</a></h3><p>&emsp;&emsp;<a href="http://matplotlib.org/" target="_blank" rel="noopener">matplotlib</a> 是一个绘图库。如果你以前曾经使用过MATLAB，那么在matplotlib环境中你可能会觉得很顺手。分析图像时，我们将使用matplotlib。无论是绘制图像直方图还是简单地查看图像本身，matplotlib都是您工具箱中的绝佳工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install matplotlib <span class="comment">#安装matplotlib</span></span><br></pre></td></tr></table></figure><h3 id="mahotas"><a href="#mahotas" class="headerlink" title="mahotas"></a><a href="http://mahotas.readthedocs.io/en/latest/#" target="_blank" rel="noopener">mahotas</a></h3><p>&emsp;&emsp;<a href="http://mahotas.readthedocs.io/en/latest/#" target="_blank" rel="noopener">mahotas</a> 就像OpenCV一样依赖于NumPy数组。在Mahotas中实现的许多功能都可以在OpenCV中找到，但在某些情况下，Mahotas接口更容易使用。我们将使用Mahotas来补充OpenCV。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install mathotas <span class="comment">#安装mathotas</span></span><br></pre></td></tr></table></figure><div class="note danger"><p>安装失败提示需要  Microsoft Visual C++ 14.0 is required.<br>在<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#mahotas下载对应版本" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#mahotas下载对应版本</a>,<br>执行pip install mathotas-1.4.0.cp<strong><em>*</em></strong>.whl  安装</p></div><h3 id="scikit-learn"><a href="#scikit-learn" class="headerlink" title="scikit-learn"></a><a href="http://scikit-learn.org/" target="_blank" rel="noopener">scikit-learn</a></h3><p>&emsp;&emsp;<a href="http://scikit-learn.org/" target="_blank" rel="noopener">scikit-learn</a> 是机器学习的算法和工具的集合</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install scikit-learn</span><br></pre></td></tr></table></figure><h3 id="scikit-image"><a href="#scikit-image" class="headerlink" title="scikit-image"></a><a href="http://scikit-image.org/" target="_blank" rel="noopener">scikit-image</a></h3><p><a href="http://scikit-image.org/" target="_blank" rel="noopener">scikit-image</a>  是图像处理算法的集合<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -U scikit-image</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp;&emsp;此书需要的包都安装完毕了，以上使用到的包在此<a href="https://www.scipy.org/about.html" target="_blank" rel="noopener">https://www.scipy.org/about.html</a>有罗列，有兴趣的朋友可以查看相关官网详细了解各包的具体使用方式和包含的方法.</p><div class="note warning"><p>如果有包安装失败建议在<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">python库</a>中找到对应的whl包，使用下载包在相关python 环境中执行 pip install …..whl</p></div><blockquote class="blockquote-center">凡事往简单处想，往认真处行</blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/practicalpythonopencv.png&quot; width=&quot;200&quot; height=&quot;300&quot;&gt;
&lt;p&gt;这是我在学习&lt;a href=&quot;https://jackmk.ctfile.com/fs/14155983-233384097&quot; ta
      
    
    </summary>
    
      <category term="opencv" scheme="https://harveyyeung.github.io/categories/opencv/"/>
    
    
      <category term="opencv" scheme="https://harveyyeung.github.io/tags/opencv/"/>
    
      <category term="python" scheme="https://harveyyeung.github.io/tags/python/"/>
    
  </entry>
  
</feed>
